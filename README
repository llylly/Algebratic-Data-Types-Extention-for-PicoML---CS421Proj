CS421 Unit Project
Algebratic Data Types for PicoML
Linyi Li & Hanyun Xu

(Extended from MP4) 

Semantics:

    type (lowercase_type_name0) = (Uppercase_constructor_name0) [of (component_type00 * component_type01 * ...)]
        | (Uppercase_constructor_name1) [of (component_type10 * component_type11 * ...)]
    and (lowercase_type_name1) = (Uppercase_constructor_name0) [of (component_type00 * component_type01 * ...)]
        | (Uppercase_constructor_name1) [of (component_type10 * component_type11 * ...)]
    and ...

    Example: type intTup = Null | One of int | Two of int * int | Tri of int * int * int;;

    Construct function: 
        Constructor_name 
            # for empty constructor
        Constructor_name (comp1, comp2, ...)
            # for non-empty constructor
        
        Example:
            let a = One (5);;
            let b = Tri (10, 5, 7);;
            let c = Two (30, 40);;
            let d = Null;;
    
    Tester function:
        !Constructor_name (exp)
            # Test whether the expression is constructed from this constructor, returns bool
        
        Example:
            !One (a);;
                > true
            !Tri (b);;
                > true
            !Two (c);;
                > true
            !Null (d);;
                > true
    
    Destructor function:
        ~Constructor_name (exp)
            # Decompose the expression to its components
            # If it's the empty constructor, return Unit (); if it's from single component, return that component;
            # Otherwise, returns (comp1, (comp2, (... (... (comp_n-1, comp_n)))))
        
        Example:
            ~One (a);;
                > 5
            ~Tri (b);;
                > (10, (5, 7))
            ~Two (c);;
                > (30, 40)
            ~Null (d);;
                > ()
            ~Null (a);;
                > (Throw Exception)

Executions:
1. ./make: build the executables
2. Exectuables are:
    ./picomlInterp: Interactive console to test our extension, along with existing PicoML expression evaluater
    ./grader: Our reimplementation of automatic tester
    ./genTest: Extended interactive console, which outputs all input expression and evaluate results each step, for test case recording.
3. "proj_tests" are test cases file, which is extendable.



